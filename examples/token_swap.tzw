scope Preambles
  use string.String
  use list.Length
  use list.Map
  use list.Quant

  function sum_of : (map address nat) -> nat

  axiom SumE : sum_of (const 0) = 0

  axiom SumI : forall m k v.
    v >= 0 ->
    m[k] >= 0 /\ (* Needed to be given by hand *)
    sum_of m[k <- v] = sum_of m + v - m[k]

  meta "algebraic:kept" type (map nat (map address nat), map nat (map address nat))

  function update_balance
    (from_ : address)
    (to_ : address)
    (token_id : nat)
    (amount : nat)
    (balances : map nat (map address nat))
    (balances' : map nat (map address nat))
    : (map nat (map address nat), map nat (map address nat)) =
    let b = balances[token_id] in
    let to_balance = b[to_] + amount in
    let b = b[to_ <- to_balance] in
    let b' = balances'[token_id] in
    let from_balance = b'[from_] + amount in
    let b' = b'[from_ <- from_balance] in
    (balances[token_id <- b], balances'[token_id <- b'])
end

scope Postambles

  predicate balances_invariant (c : ctx) (c' : ctx) =
    true
    (* forall a. sum_of c.token_storage.Token.balances[a] = sum_of c'.token_storage.Token.balances[a]
    (* That's true but can not be proved automatically *) *)
end

scope Unknown
  predicate pre (c : ctx) = Token0.addr <> Token1.addr (* Required!! *)

  predicate post (c : ctx) (c' : ctx) =
    balances_invariant c c'

  scope Entrypoint
    predicate default unit
  end

end

scope Swap

  type storage [@gen_wf] = { }

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    match st.entrypoint, gp with
    | ICon.Contract.Swap, ICon.Gp ((a_addr, a_token_id, a_amount, b_addr, b_token_id, b_amount) : (address, nat, nat, address, nat, nat)) ->
        c.token0_storage.Token0.operators[a_token_id][a_addr][Swap.addr] /\
        c.token1_storage.Token1.operators[b_token_id][b_addr][Swap.addr] /\
        ( let balances = c.token0_storage.Token0.balances in
          let balances' = c'.token0_storage.Token0.balances in
          let balances, balances' = update_balance a_addr b_addr a_token_id a_amount balances balances' in
          balances = balances'
        ) /\
        ( let balances = c.token1_storage.Token1.balances in
          let balances' = c'.token1_storage.Token1.balances in
          let balances, balances' = update_balance b_addr a_addr b_token_id b_amount balances balances' in
          balances = balances'
        )
    | _ -> false
    end

  let upper_ops = 2

  scope Spec
    predicate swap
      (st : step)
      (p : (address, nat, nat, address, nat, nat))
      (s : storage)
      (ops : list operation)
      (s' : storage) =
      let (a_addr, a_token_id, a_amount, b_addr, b_token_id, b_amount) = p in
      a_addr <> self st /\
      b_addr <> self st /\
      let op0 = Xfer (ICon.Gp ((a_addr, b_addr, a_token_id, a_amount) : (address, address, nat, nat))) 0 Token0.addr ICon.Contract.Transfer in
      let op1 = Xfer (ICon.Gp ((b_addr, a_addr, b_token_id, b_amount) : (address, address, nat, nat))) 0 Token1.addr ICon.Contract.Transfer in
      ops = Cons op0 (Cons op1 Nil)

  end

end

scope Token0
  type storage [@gen_wf] = {
    balances : map nat (map address nat);
    operators : map nat (map address (map address bool));
  }

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    c.token1_storage = c'.token1_storage /\
    match st.entrypoint, gp with
    | ICon.Contract.Transfer, ICon.Gp ((from_, to_, token_id, amount) : (address, address, nat, nat)) ->
        ( from_ = sender st \/ c.token0_storage.Token0.operators[token_id][from_][sender st]) /\
          let balances = c.token0_storage.Token0.balances in
          let balances' = c'.token0_storage.Token0.balances in
          let b, b' = update_balance from_ to_ token_id amount balances balances' in
          b = b' /\
          c.token0_storage.Token0.operators = c'.token0_storage.Token0.operators
    | ICon.Contract.Update_operators, _ ->
        c.token0_storage.Token0.balances = c'.token0_storage.Token0.balances
    | _ -> false
    end

  let upper_ops = 0

  scope Spec

    predicate transfer
      (st : step)
      (p : (address, address, nat, nat))
      (s : storage)
      (ops : list operation)
      (s' : storage) =
        let (from_, to_, token_id, amount) = p in
        let sender = sender st in
        (from_ = sender \/ s.operators[token_id][from_][sender]) /\
        s.balances[token_id][from_] >= amount /\
        let b, b' = update_balance from_ to_ token_id amount s.balances s'.balances in
        b = b' /\
        s.operators = s'.operators /\
        ops = Nil

  predicate update_operators
    (st : step)
    (e : (or (address, (address, nat)) (address, (address, nat))))
    (s : storage)
    (ops : list operation)
    (s' : storage) =
      let sender = sender st in
      match e with
      | Left (owner, (ope, token_id)) ->
          owner = sender /\
          s'.operators[token_id][owner][ope]
      | Right (owner, (ope, token_id)) ->
          owner = sender /\
          not s'.operators[token_id][owner][ope]
      end /\
      s.balances = s'.balances /\
      ops = Nil

  end
end


scope Token1
  type storage [@gen_wf] = {
    balances : map nat (map address nat);
    operators : map nat (map address (map address bool));
  }

  predicate pre (st : step) (gp : gparam) (c : ctx) = Token0.addr <> Token1.addr

  predicate post (st : step) (gp : gparam) (c : ctx) (c' : ctx) =
    balances_invariant c c' /\
    c.token0_storage = c'.token0_storage /\
    match st.entrypoint, gp with
    | ICon.Contract.Transfer, ICon.Gp ((from_, to_, token_id, amount): (address, address, nat, nat)) ->
        ( from_ = sender st \/ c.token1_storage.Token1.operators[token_id][from_][sender st]) /\
          let balances = c.token1_storage.Token1.balances in
          let balances' = c'.token1_storage.Token1.balances in
          let b, b' = update_balance from_ to_ token_id amount balances balances' in
          b = b' /\
          c.token1_storage.Token1.operators = c'.token1_storage.Token1.operators
    | ICon.Contract.Update_operators, _ ->
        c.token1_storage.Token1.balances = c'.token1_storage.Token1.balances
    | _ -> false
    end

  let upper_ops = 0

  scope Spec

    predicate transfer
      (st : step)
      (p : (address, address, nat, nat))
      (s : storage)
      (ops : list operation)
      (s' : storage) =
        let (from_, to_, token_id, amount)= p in
        let sender = sender st in
        (from_ = sender \/ s.operators[token_id][from_][sender]) /\
        s.balances[token_id][from_] >= amount /\
        let b, b' = update_balance from_ to_ token_id amount s.balances s'.balances in
        b = b' /\
        s.operators = s'.operators /\
        ops = Nil

  predicate update_operators
    (st : step)
    (e : (or (address, (address, nat)) (address, (address, nat))))
    (s : storage)
    (ops : list operation)
    (s' : storage) =
      let sender = sender st in
      match e with
      | Left (owner, (ope, token_id)) ->
          owner = sender /\
          s'.operators[token_id][owner][ope]
      | Right (owner, (ope, token_id)) ->
          owner = sender /\
          not s'.operators[token_id][owner][ope]
      end /\
      s.balances = s'.balances /\
      ops = Nil

  end
end
