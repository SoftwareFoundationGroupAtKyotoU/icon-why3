module Michelson
  use export int.Int
  use export int.EuclideanDivision
  use export option.Option
  use export list.List
  use export map.Map
  use export map.Const

  exception Insufficient_mutez
  exception Terminate

  type nat = int

  type mutez = int

  type address = int

  type timestamp = int

  type or 'a 'b = Left 'a | Right 'b

  type step = (address, address, address, mutez)

  function mk_step (source : address) (sender : address) (self : address) (amount : mutez) : step = (source, sender, self, amount)

  function source (st : step) : address =
    match st with x, _, _, _ -> x end

  function sender (st : step) : address =
    match st with _, x, _, _ -> x end

  function self (st : step) : address =
    match st with _, _, x, _ -> x end

  function amount (st : step) : mutez =
    match st with _, _, _, x -> x end

  predicate st_wf (st : step) =
    st.amount >= 0

  function transfer (l : map address mutez) (src : address) (dst : address) (amt : mutez) : map address mutez =
    let l' = l[src <- l[src] - amt] in
    l'[dst <- l'[dst] + amt]
end
