scope Unknown

  predicate pre (c : ctx) = true

  predicate post (c : ctx) (c' : ctx) =
    c.boomerang_store.mutez_v <= c'.boomerang_store.mutez_v /\
    c.boomerang_balance.mutez_v = c'.boomerang_balance.mutez_v

end

scope Boomerang

  type param = unit

  type store = mutez

  predicate spec (st : step) (p : unit) (s : mutez) (ops : list operation) (s' : mutez) =
    mutez_eq (mutez_add s st.amount) s' /\
    (st.amount.mutez_v = 0 -> ops = Nil) /\
    (st.amount.mutez_v > 0 -> ops = Cons (Xfer (PUnit ()) st.amount st.sender) Nil)

  let upper_ops = 1

  predicate pre (c : ctx) = true

  predicate post (st : step) (p : unit) (c : ctx) (c' : ctx) = inv_post c c'

end
