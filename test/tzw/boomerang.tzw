scope Unknown

  predicate pre (c : ctx) = true

  predicate post (c : ctx) (c' : ctx) =
    Mutez.(eq c.boomerang_balance c'.boomerang_balance)

end

scope Boomerang

  type param = unit

  type store = unit

  predicate spec (st : step) (p : unit) (s : unit) (ops : list operation) (s' : unit) =
    s = s' /\
    (Mutez.(eq st.amount (mk 0)) -> ops = Nil) /\
    (Mutez.(lt (mk 0) st.amount) -> ops = Cons (Xfer (PUnit ()) st.amount st.sender) Nil)

  let upper_ops = 1

  predicate pre (c : ctx) = true

  predicate post (st : step) (p : unit) (c : ctx) (c' : ctx) =
    Mutez.(eq c.boomerang_balance c'.boomerang_balance)

end
