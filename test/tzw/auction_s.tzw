scope WhyML

  function sum_of : map address mutez -> mutez

  axiom SumE : Mutez.(eq (sum_of (const (mk 0))) (mk 0))

  axiom SumI : forall m k v. Mutez.(eq (sum_of m[k <- v]) (add (sub (sum_of m) m[k]) v))

  axiom SumN : forall m k. Mutez.(le m[k] (sum_of m))

end

scope Unknown

  predicate pre (c : ctx) =
    let (beneficiary, (highest_bidder, (highest_bid, (ended, pending_returns)))) = c.auction_store in
    beneficiary <> highest_bidder /\
    Mutez.(eq pending_returns[beneficiary] (mk 0)) /\
    (not ended -> Mutez.(le (add highest_bid (sum_of pending_returns)) c.auction_balance)) /\
    (ended -> Mutez.(le (sum_of pending_returns) c.auction_balance))

  predicate post (c : ctx) (c' : ctx) =
    let (beneficiary, (highest_bidder, (highest_bid, (ended, pending_returns)))) = c.auction_store in
    let (beneficiary', (highest_bidder', (highest_bid', (ended', pending_returns')))) = c'.auction_store in
    beneficiary = beneficiary' /\
    beneficiary' <> highest_bidder' /\
    (ended -> ended') /\
    Mutez.(eq pending_returns'[beneficiary'] (mk 0)) /\
    (not ended' -> Mutez.(le (add highest_bid' (sum_of pending_returns')) c'.auction_balance)) /\
    (ended' -> Mutez.(le (sum_of pending_returns') c'.auction_balance))

end

scope Auction

  type param = (or unit (or unit unit))

  type store = (address, (address, (mutez, (bool, (map address mutez)))))

  predicate spec (st : step) (p : (or unit (or unit unit))) (s : (address, (address, (mutez, (bool, (map address mutez)))))) (ops : list operation) (s' : (address, (address, (mutez, (bool, (map address mutez)))))) =
    let (beneficiary, (highest_bidder, (highest_bid, (ended, pending_returns)))) = s in
    match p with
    | Left () -> (* bid *)
        (not ended /\
        Mutez.(lt highest_bid st.amount) /\
        st.sender <> beneficiary) /\
        let pending_returns = pending_returns[highest_bidder <- Mutez.(add pending_returns[highest_bidder] highest_bid)] in
        s' = (beneficiary, (st.sender, (st.amount, (ended, pending_returns)))) /\
        ops = Nil
    | Right (Left ()) -> (* withdraw *)
        Mutez.(lt (mk 0) st.amount) /\
        let pending_amount = pending_returns[st.sender] in
        let pending_returns = pending_returns[st.sender <- Mutez.mk 0] in
        s' = (beneficiary, (highest_bidder, (highest_bid, (ended, pending_returns)))) /\
        ops = Cons (Xfer (PUnit ()) pending_amount st.sender) Nil
    | Right (Right ()) -> (* endAuction *)
        (not ended /\ Mutez.(lt (mk 0) st.amount)) /\
        s' = (beneficiary, (highest_bidder, (highest_bid, (true, pending_returns)))) /\
        ops = Cons (Xfer (PUnit ()) highest_bid beneficiary) Nil
    end

  let upper_ops = 1

  predicate pre (c : ctx) = inv_pre c

  predicate post (st : step) (p : (or unit (or unit unit))) (c : ctx) (c' : ctx) = inv_post c c'

end
