use export int.Int
use export int.Abs
use export int.EuclideanDivision
use export list.List
use export option.Option
use export map.Map
use export map.Const

exception Insufficient_mutez
exception Terminate

type nat = int

type mutez = int

type address = int

type key_hash = int

type timestamp = int

type contract 'a = int

type or 'a 'b = Left 'a | Right 'b

type step = 
  { source: address;
    sender: address;
    self: address;
    amount: mutez;
    level: nat
  }

function mk_step (source : address) (sender : address) (self : address) (amount : mutez) (level : nat) : step =
  { source= source; 
    sender= sender;
    self= self;
    amount= amount;
    level= level }

predicate step_wf (st : step) =
  st.amount >= 0
